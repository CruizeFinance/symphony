/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AaveV2WrapperInterface extends ethers.utils.Interface {
  functions: {
    "BASE()": FunctionFragment;
    "ETH()": FunctionFragment;
    "WETH()": FunctionFragment;
    "aaveDefaulLTV()": FunctionFragment;
    "borrowRatio()": FunctionFragment;
    "changeBorrowRatio(uint256)": FunctionFragment;
    "crContract()": FunctionFragment;
    "cruize_wallet()": FunctionFragment;
    "lpTokens(address)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFloor()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aaveDefaulLTV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBorrowRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cruize_wallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "oracles", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFloor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aaveDefaulLTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBorrowRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cruize_wallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFloor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddAsset(address,address)": EventFragment;
    "BorrowRatioChanged(uint256)": EventFragment;
    "CreateToken(address,string,string,uint8)": EventFragment;
    "DepositEvent(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawEvent(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEvent"): EventFragment;
}

export type AddAssetEvent = TypedEvent<
  [string, string] & { _asset: string; _oracle: string }
>;

export type BorrowRatioChangedEvent = TypedEvent<
  [BigNumber] & { ratio: BigNumber }
>;

export type CreateTokenEvent = TypedEvent<
  [string, string, string, number] & {
    tokenAddress: string;
    tokenName: string;
    tokenSymbol: string;
    decimal: number;
  }
>;

export type DepositEventEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WithdrawEventEvent = TypedEvent<
  [string, string, BigNumber] & {
    asset: string;
    account: string;
    amount: BigNumber;
  }
>;

export class AaveV2Wrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AaveV2WrapperInterface;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETH(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    aaveDefaulLTV(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeBorrowRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crContract(overrides?: CallOverrides): Promise<[string]>;

    cruize_wallet(overrides?: CallOverrides): Promise<[string]>;

    lpTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFloor(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  ETH(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  aaveDefaulLTV(overrides?: CallOverrides): Promise<BigNumber>;

  borrowRatio(overrides?: CallOverrides): Promise<BigNumber>;

  changeBorrowRatio(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crContract(overrides?: CallOverrides): Promise<string>;

  cruize_wallet(overrides?: CallOverrides): Promise<string>;

  lpTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFloor(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    ETH(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    aaveDefaulLTV(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatio(overrides?: CallOverrides): Promise<BigNumber>;

    changeBorrowRatio(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crContract(overrides?: CallOverrides): Promise<string>;

    cruize_wallet(overrides?: CallOverrides): Promise<string>;

    lpTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFloor(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddAsset(address,address)"(
      _asset?: string | null,
      _oracle?: null
    ): TypedEventFilter<[string, string], { _asset: string; _oracle: string }>;

    AddAsset(
      _asset?: string | null,
      _oracle?: null
    ): TypedEventFilter<[string, string], { _asset: string; _oracle: string }>;

    "BorrowRatioChanged(uint256)"(
      ratio?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { ratio: BigNumber }>;

    BorrowRatioChanged(
      ratio?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { ratio: BigNumber }>;

    "CreateToken(address,string,string,uint8)"(
      tokenAddress?: string | null,
      tokenName?: null,
      tokenSymbol?: null,
      decimal?: null
    ): TypedEventFilter<
      [string, string, string, number],
      {
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
        decimal: number;
      }
    >;

    CreateToken(
      tokenAddress?: string | null,
      tokenName?: null,
      tokenSymbol?: null,
      decimal?: null
    ): TypedEventFilter<
      [string, string, string, number],
      {
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
        decimal: number;
      }
    >;

    "DepositEvent(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    DepositEvent(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "WithdrawEvent(address,address,uint256)"(
      asset?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { asset: string; account: string; amount: BigNumber }
    >;

    WithdrawEvent(
      asset?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { asset: string; account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    aaveDefaulLTV(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatio(overrides?: CallOverrides): Promise<BigNumber>;

    changeBorrowRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crContract(overrides?: CallOverrides): Promise<BigNumber>;

    cruize_wallet(overrides?: CallOverrides): Promise<BigNumber>;

    lpTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFloor(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveDefaulLTV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBorrowRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cruize_wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFloor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
