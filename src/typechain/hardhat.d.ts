/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AaveV2Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Wrapper__factory>;
    getContractFactory(
      name: "AaveV3Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3Wrapper__factory>;
    getContractFactory(
      name: "AaveV2Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Wrapper__factory>;
    getContractFactory(
      name: "AaveV3Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3Wrapper__factory>;
    getContractFactory(
      name: "AssetPoolUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetPoolUpgradeable__factory>;
    getContractFactory(
      name: "CRTokenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CRTokenUpgradeable__factory>;
    getContractFactory(
      name: "AaveV2Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Wrapper__factory>;
    getContractFactory(
      name: "AaveV2Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Wrapper__factory>;
    getContractFactory(
      name: "CRTokenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CRTokenUpgradeable__factory>;
    getContractFactory(
      name: "Cruize",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cruize__factory>;
    getContractFactory(
      name: "AaveV2Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Wrapper__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolV2__factory>;
    getContractFactory(
      name: "IPoolV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolV3__factory>;
    getContractFactory(
      name: "IWeth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeth__factory>;
    getContractFactory(
      name: "IWETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETHGateway__factory>;
    getContractFactory(
      name: "ILPtoken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILPtoken__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "USDCPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDCPool__factory>;

    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AaveV2Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Wrapper>;
    getContractAt(
      name: "AaveV3Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV3Wrapper>;
    getContractAt(
      name: "AaveV2Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Wrapper>;
    getContractAt(
      name: "AaveV3Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV3Wrapper>;
    getContractAt(
      name: "AssetPoolUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetPoolUpgradeable>;
    getContractAt(
      name: "CRTokenUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CRTokenUpgradeable>;
    getContractAt(
      name: "AaveV2Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Wrapper>;
    getContractAt(
      name: "AaveV2Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Wrapper>;
    getContractAt(
      name: "CRTokenUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CRTokenUpgradeable>;
    getContractAt(
      name: "Cruize",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cruize>;
    getContractAt(
      name: "AaveV2Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Wrapper>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "IPoolV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolV2>;
    getContractAt(
      name: "IPoolV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolV3>;
    getContractAt(
      name: "IWeth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWeth>;
    getContractAt(
      name: "IWETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETHGateway>;
    getContractAt(
      name: "ILPtoken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILPtoken>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "USDCPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDCPool>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
